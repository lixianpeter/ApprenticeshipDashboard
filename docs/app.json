[{"name":"app.R","content":"# Forecasting Sandbox ----\n# This is an example for a Shinylive R app\n# The app provides a forecasting sandbox for the ApprenticeshipData dataset\n# It supports 3 stats forecasting models - Linear Regression, ARIMA, and Holt-Winters\n\nlibrary(shiny)\nlibrary(readxl)\nApprenticeshipData_copy <- read_excel(\"ApprenticeshipData copy.xlsx\")\n#ApprenticeshipData <- ts(ApprenticeshipData)\n#ApprenticeshipData_ts<- ts(ApprenticeshipData[,-1], class= c(\"ts\"))\nApprenticeshipData<-ts(ApprenticeshipData_copy/1000, start = c(2019, 1), frequency = 4, class =\"ts\")\n# UI ----\nui <- fluidPage(\n  \n  # App title ----\n  titlePanel(\"Forecasting Models for Australian Apprenticeship Commencements\"),\n  sidebarLayout(position = \"right\",\n    \n    sidebarPanel(\n                 width = 3,\n                 selectInput(inputId = \"model\",\n                             label = \"Select Model\",\n                             choices = c(\"Linear Regression\", \"ARIMA\", \"Holt-Winters\"),\n                             selected = \"Linear Regression\"),\n                 # Linear Regression model arguments\n                 conditionalPanel(condition = \"input.model == 'Linear Regression'\",\n                                  checkboxGroupInput(inputId = \"lm_args\", \n                                                     label = \"Select Regression Features:\", \n                                                     choices = list(\"Trend\" = 1, \n                                                                    \"Seasonality\" = 2),\n                                                     selected = 1)),\n                 # ARIMA model arguments\n                 conditionalPanel(condition = \"input.model == 'ARIMA'\",\n                                  h5(\"Order Parameters\"),\n                                  sliderInput(inputId = \"p\",\n                                              label = \"p:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"d\",\n                                              label = \"d:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"q\",\n                                              label = \"q:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  h5(\"Seasonal Parameters:\"),\n                                  sliderInput(inputId = \"P\",\n                                              label = \"P:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"D\",\n                                              label = \"D:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0),\n                                  sliderInput(inputId = \"Q\",\n                                              label = \"Q:\",\n                                              min = 0,\n                                              max = 5,\n                                              value = 0)\n                 ),\n                 # Holt Winters model arguments\n                 conditionalPanel(condition = \"input.model == 'Holt-Winters'\",\n                                  checkboxGroupInput(inputId = \"hw_args\", \n                                                     label = \"Select Holt-Winters Parameters:\", \n                                                     choices = list(\"Beta\" = 2, \n                                                                    \"Gamma\" = 3),\n                                                     selected = c(1, 2, 3)),\n                                  selectInput(inputId = \"hw_seasonal\",\n                                              label = \"Select Seasonal Type:\",\n                                              choices = c(\"Additive\", \"Multiplicative\"),\n                                              selected = \"Additive\")),\n                 \n                 checkboxInput(inputId = \"log\", \n                               label = \"Log Transformation\",\n                               value = FALSE),\n                 sliderInput(inputId = \"h\",\n                             label = \"Forecasting Horizon:\",\n                             min = 1,\n                             max = 60,\n                             value = 24)\n                 #   actionButton(inputId = \"update\",\n                 #                 label = \"Update!\")\n                 \n    ),\n    \n    # Main panel for displaying outputs ----\n    mainPanel(width = 9,\n              # Forecast Plot ----\n              plotOutput(outputId = \"fc_plot\",\n                         height = \"400px\")\n              \n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n  # Load the dataset a reactive object\n  d <- reactiveValues(df = data.frame(input = as.numeric(ApprenticeshipData), \n                                      index = seq.Date(from = as.Date(\"2019-01-01\"),\n                                                       by = \"quarter\",\n                                                       length.out = length(ApprenticeshipData))),\n                      air = ApprenticeshipData)\n  \n  # Log transformation \n  observeEvent(input$log,{\n    if(input$log){\n      d$df <- data.frame(input = log(as.numeric(ApprenticeshipData)), \n                         index = seq.Date(from = as.Date(\"2019-01-01\"),\n                                          by = \"quarter\",\n                                          length.out = length(ApprenticeshipData)))\n      \n      d$air <- log(ApprenticeshipData)\n    } else {\n      d$df <- data.frame(input = as.numeric(ApprenticeshipData), \n                         index = seq.Date(from = as.Date(\"2019-01-01\"),\n                                          by = \"quarter\",\n                                          length.out = length(ApprenticeshipData)))\n      \n      d$air <- ApprenticeshipData\n    }\n  })\n  \n  # The forecasting models execute under the plot render\n  output$fc_plot <- renderPlot({\n    \n    # if adding a prediction intervals level argument set over here\n    pi <- 0.95\n    \n    # Holt-Winters model\n    if(input$model == \"Holt-Winters\"){\n      a <- b <- c <- NULL\n      \n      if(!\"2\" %in% input$hw_args){\n        b <- FALSE\n      }\n      \n      if(!\"3\" %in% input$hw_args){\n        c <- FALSE\n      }\n      \n      md <- HoltWinters(d$air, \n                        seasonal = ifelse(input$hw_seasonal == \"Additive\", \"additive\", \"multiplicative\"),\n                        beta = b,\n                        gamma = c\n      )\n      fc <- predict(md, n.ahead = input$h, prediction.interval = TRUE) |>\n        as.data.frame()\n      fc$index <- seq.Date(from = as.Date(\"2021-01-01\"),\n                           by = \"quarter\",\n                           length.out = input$h)\n      # ARIMA model\n    } else if(input$model == \"ARIMA\"){\n      \n      md <- arima(d$air,\n                  order = c(input$p, input$d, input$q),\n                  seasonal = list(order = c(input$P, input$D, input$Q))\n      )\n      fc <- predict(md, n.ahead = input$h, prediction.interval = TRUE) |>\n        as.data.frame() \n      names(fc) <- c(\"fit\", \"se\")\n      \n      fc$index <- seq.Date(from = as.Date(\"2021-01-01\"),\n                           by = \"quarter\",\n                           length.out = input$h)\n      \n      fc$upr <- fc$fit + 1.96 * fc$se\n      fc$lwr <- fc$fit - 1.96 * fc$se\n      # Linear Regression model\n    } else if(input$model == \"Linear Regression\"){\n      \n      d_lm <- d$df\n      \n      d_fc <- data.frame(index = seq.Date(from = as.Date(\"2021-01-01\"),\n                                          by = \"quarter\",\n                                          length.out = input$h))\n      \n      if(\"1\" %in% input$lm_args){\n        d_lm$trend <- 1:nrow(d_lm)\n        d_fc$trend <- (max(d_lm$trend) + 1):(max(d_lm$trend) + input$h)\n      }\n      \n      if(\"2\" %in% input$lm_args){\n        d_lm$season <- as.factor(months((d_lm$index)))\n        d_fc$season <- factor(months((d_fc$index)), levels = levels(d_lm$season))\n      }\n      \n      md <- lm(input ~ ., data = d_lm[, - which(names(d_lm) == \"index\")])\n      \n      fc <- predict(md, n.ahead = input$h, interval = \"prediction\",\n                    level = pi, newdata = d_fc) |>\n        as.data.frame() \n      \n      \n      fc$index <- seq.Date(from = as.Date(\"2021-01-01\"),\n                           by = \"quarter\",\n                           length.out = input$h)\n      \n    }\n    \n    # Setting the plot\n    at_x <- pretty(seq.Date(from = min(d$df$index),\n                            to = max(fc$index),\n                            by = \"quarter\"))\n    \n    at_y <- c(pretty(c(d$df$input, fc$upr)), 1200)\n    \n    plot(x = d$df$index, y = d$df$input,\n         col = \"green\",\n         type = \"l\",\n         frame.plot = FALSE,\n         axes = FALSE,\n         panel.first = abline(h = at_y, col = \"grey80\"),\n         main = \"Australian Apprenticeship Forecast\",\n         xlim = c(min(d$df$index), max(fc$index)),\n         ylim = c(min(c(min(d$df$input), min(fc$lwr))), max(c(max(fc$upr), max(d$df$input)))),\n         xlab = paste(\"Model:\", input$model, sep = \" \"),\n         ylab = \"Num. of Commencements (in Thousands)\")\n    mtext(side =1, text = format(at_x, format = \"%Y-%M\"), at = at_x,\n          col = \"grey20\", line = 1, cex = 0.8)\n    \n    mtext(side =2, text = format(at_y, scientific = FALSE), at = at_y,\n          col = \"grey20\", line = 1, cex = 0.8)\n    lines(x = fc$index, y = fc$fit, col = 'green', lty = 2, lwd = 2)\n    lines(x = fc$index, y = fc$upr, col = 'grey', lty = 2, lwd = 2)\n    lines(x = fc$index, y = fc$lwr, col = 'grey', lty = 2, lwd = 2)\n    \n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"ApprenticeshipData copy.xlsx","content":"UEsDBBQABgAIAAAAIQBi7p1oXgEAAJAEAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIo\noAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACslMtOwzAQRfdI/EPkLUrcskAINe2CxxIq\nUT7AxJPGqmNbnmlp/56J+xBCoRVqN7ESz9x7MvHNaLJubbaCiMa7UgyLgcjAVV4bNy/Fx+wl\nvxcZknJaWe+gFBtAMRlfX41mmwCYcbfDUjRE4UFKrBpoFRY+gOOd2sdWEd/GuQyqWqg5yNvB\n4E5W3hE4yqnTEOPRE9RqaSl7XvPjLUkEiyJ73BZ2XqVQIVhTKWJSuXL6l0u+cyi4M9VgYwLe\nMIaQvQ7dzt8Gu743Hk00GrKpivSqWsaQayu/fFx8er8ojov0UPq6NhVoXy1bnkCBIYLS2ABQ\na4u0Fq0ybs99xD8Vo0zL8MIg3fsl4RMcxN8bZLqej5BkThgibSzgpceeRE85NyqCfqfIybg4\nwE/tYxx8bqbRB+QERfj/FPYR6brzwEIQycAhJH2H7eDI6Tt77NDlW4Pu8ZbpfzL+BgAA//8D\nAFBLAwQUAAYACAAAACEAtVUwI/QAAABMAgAACwAIAl9yZWxzLy5yZWxzIKIEAiigAAIAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKySTU/DMAyG70j8h8j31d2QEEJLd0FIuyFUfoBJ3A+1\njaMkG92/JxwQVBqDA0d/vX78ytvdPI3qyCH24jSsixIUOyO2d62Gl/pxdQcqJnKWRnGs4cQR\ndtX11faZR0p5KHa9jyqruKihS8nfI0bT8USxEM8uVxoJE6UchhY9mYFaxk1Z3mL4rgHVQlPt\nrYawtzeg6pPPm3/XlqbpDT+IOUzs0pkVyHNiZ9mufMhsIfX5GlVTaDlpsGKecjoieV9kbMDz\nRJu/E/18LU6cyFIiNBL4Ms9HxyWg9X9atDTxy515xDcJw6vI8MmCix+o3gEAAP//AwBQSwME\nFAAGAAgAAAAhAFW6T0GJAwAA4ggAAA8AAAB4bC93b3JrYm9vay54bWysVV1vozgUfV9p/wPi\nnRoTPgIqGUEAbaV2VKWZduapcsEpVgGzxjSJqvnvc01C2k5Go2xnUWJj+3J87r3n2uefNnWl\n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","type":"binary"},{"name":"ApprenticeshipData.xlsx","content":"UEsDBBQABgAIAAAAIQBi7p1oXgEAAJAEAAATAAgCW0NvbnRlbnRfVHlwZXNdLnhtbCCiBAIo\noAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACslMtOwzAQRfdI/EPkLUrcskAINe2CxxIq\nUT7AxJPGqmNbnmlp/56J+xBCoRVqN7ESz9x7MvHNaLJubbaCiMa7UgyLgcjAVV4bNy/Fx+wl\nvxcZknJaWe+gFBtAMRlfX41mmwCYcbfDUjRE4UFKrBpoFRY+gOOd2sdWEd/GuQyqWqg5yNvB\n4E5W3hE4yqnTEOPRE9RqaSl7XvPjLUkEiyJ73BZ2XqVQIVhTKWJSuXL6l0u+cyi4M9VgYwLe\nMIaQvQ7dzt8Gu743Hk00GrKpivSqWsaQayu/fFx8er8ojov0UPq6NhVoXy1bnkCBIYLS2ABQ\na4u0Fq0ybs99xD8Vo0zL8MIg3fsl4RMcxN8bZLqej5BkThgibSzgpceeRE85NyqCfqfIybg4\nwE/tYxx8bqbRB+QERfj/FPYR6brzwEIQycAhJH2H7eDI6Tt77NDlW4Pu8ZbpfzL+BgAA//8D\nAFBLAwQUAAYACAAAACEAtVUwI/QAAABMAgAACwAIAl9yZWxzLy5yZWxzIKIEAiigAAIAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKySTU/DMAyG70j8h8j31d2QEEJLd0FIuyFUfoBJ3A+1\njaMkG92/JxwQVBqDA0d/vX78ytvdPI3qyCH24jSsixIUOyO2d62Gl/pxdQcqJnKWRnGs4cQR\ndtX11faZR0p5KHa9jyqruKihS8nfI0bT8USxEM8uVxoJE6UchhY9mYFaxk1Z3mL4rgHVQlPt\nrYawtzeg6pPPm3/XlqbpDT+IOUzs0pkVyHNiZ9mufMhsIfX5GlVTaDlpsGKecjoieV9kbMDz\nRJu/E/18LU6cyFIiNBL4Ms9HxyWg9X9atDTxy515xDcJw6vI8MmCix+o3gEAAP//AwBQSwME\nFAAGAAgAAAAhAD7IkoCGAwAA2wgAAA8AAAB4bC93b3JrYm9vay54bWysVV1vozgUfV9p/wPi\nnRoTPgIqHfGprdSOqjTT7j6NXHCKVcCsMU2iav77XJOQtpPVKtMZlNjYvhyfe++59vmnTVNr\n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","type":"binary"}]
